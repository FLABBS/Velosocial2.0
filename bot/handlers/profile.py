# VelosocialBot/handlers/profile.py
import os
import json
import logging
from pathlib import Path
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import get_connection

router = Router()
logger = logging.getLogger(__name__)
PROFILES_DIR = Path(__file__).parent.parent / "profiles"
os.makedirs(PROFILES_DIR, exist_ok=True)
MAX_PHOTO_SIZE = 5 * 1024 * 1024  # 5 MB


class ProfileStates(StatesGroup):
    PHOTO = State()
    BIKE_TYPE = State()
    SKILL_LEVEL = State()
    BIO = State()
    CONTACTS = State()


@router.message(Command("profile"))
async def profile_setup(message: Message, state: FSMContext) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        await state.clear()
        await message.answer("üì∏ –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è (–∏–ª–∏ /skip):")
        await state.set_state(ProfileStates.PHOTO)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ profile_setup: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")


@router.message(ProfileStates.PHOTO, F.photo)
async def handle_photo(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
    try:
        user = message.from_user
        await state.update_data(
            telegram_id=user.id,
            username=user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        )

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        largest_photo = max(message.photo, key=lambda p: p.file_size)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
        if (
            largest_photo.file_size
            and largest_photo.file_size > MAX_PHOTO_SIZE
        ):
            await message.answer(
                "‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 5 –ú–ë."
            )
            return

        photo_file = await message.bot.get_file(largest_photo.file_id)

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        photo_path = PROFILES_DIR / f"{user.id}.jpg"
        await message.bot.download_file(
            photo_file.file_path, destination=photo_path
        )
        await state.update_data(photo=str(photo_path))

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
        builder = InlineKeyboardBuilder()
        buttons = [
            ("–®–æ—Å—Å–µ üö¥‚ôÇÔ∏è", "road"),
            ("MTB üèî", "mtb"),
            ("–ì–æ—Ä–æ–¥—Å–∫–æ–π üèô", "city")
        ]
        for text, data in buttons:
            builder.button(text=text, callback_data=data)
        builder.adjust(2, 1)

        await message.answer(
            "üö≤ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:",
            reply_markup=builder.as_markup(),
        )
        await state.set_state(ProfileStates.BIKE_TYPE)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ")


@router.message(ProfileStates.PHOTO, Command("skip"))
async def handle_skip_photo(message: Message, state: FSMContext) -> None:
    """–ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""
    try:
        user = message.from_user
        await state.update_data(
            telegram_id=user.id,
            username=user.username or "–ë–µ–∑ –∏–º–µ–Ω–∏",
            photo=None
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞
        builder = InlineKeyboardBuilder()
        buttons = [
            ("–®–æ—Å—Å–µ üö¥‚ôÇÔ∏è", "road"),
            ("MTB üèî", "mtb"),
            ("–ì–æ—Ä–æ–¥—Å–∫–æ–π üèô", "city")
        ]
        for text, data in buttons:
            builder.button(text=text, callback_data=data)
        builder.adjust(2, 1)

        await message.answer(
            "üö≤ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞:",
            reply_markup=builder.as_markup(),
        )
        await state.set_state(ProfileStates.BIKE_TYPE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_skip_photo: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫–µ —Ñ–æ—Ç–æ")


@router.callback_query(
    ProfileStates.BIKE_TYPE,
    F.data.in_({"road", "mtb", "city"}),
)
async def handle_bike_type(callback: CallbackQuery, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–∞"""
    try:
        await state.update_data(bike_type=callback.data)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
        builder = InlineKeyboardBuilder()
        buttons = [
            ("–ù–∞—á–∏–Ω–∞—é—â–∏–π üå±", "beginner"),
            ("–õ—é–±–∏—Ç–µ–ª—å üö¥‚ôÄÔ∏è", "intermediate"),
            ("–ü—Ä–æ—Ñ–∏ üî•", "pro")
        ]
        for text, data in buttons:
            builder.button(text=text, callback_data=data)
        builder.adjust(2, 1)

        await callback.message.edit_text(
            text="üìä –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(ProfileStates.SKILL_LEVEL)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bike_type: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞")


@router.callback_query(
    ProfileStates.SKILL_LEVEL,
    F.data.in_({"beginner", "intermediate", "pro"}),
)
async def handle_skill_level(
    callback: CallbackQuery, state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏"""
    try:
        await state.update_data(skill_level=callback.data)
        await callback.message.edit_text(
            "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤):"
        )
        await state.set_state(ProfileStates.BIO)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_skill_level: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è")


@router.message(ProfileStates.BIO, F.text)
async def handle_bio(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        await state.update_data(bio=message.text[:200])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        builder = InlineKeyboardBuilder()
        buttons = [
            ("Telegram", "telegram"),
            ("WhatsApp", "whatsapp")
        ]
        for text, data in buttons:
            builder.button(text=text, callback_data=data)

        await message.answer(
            "üì± –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:",
            reply_markup=builder.as_markup(),
        )
        await state.set_state(ProfileStates.CONTACTS)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_bio: {e}", exc_info=True)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è")


@router.callback_query(
    ProfileStates.CONTACTS,
    F.data.in_({"telegram", "whatsapp"}),
)
async def handle_contacts(callback: CallbackQuery, state: FSMContext) -> None:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    try:
        data = await state.get_data()
        logger.debug(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {data}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = [
            "telegram_id",
            "username",
            "bike_type",
            "skill_level",
            "bio",
        ]
        for field in required_fields:
            if field not in data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        user = callback.from_user
        contacts = {
            callback.data: user.username or user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω"
        }

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        conn = await get_connection()
        async with conn:
            await conn.execute('''
                INSERT INTO users (
                    telegram_id, username, bike_type, 
                    skill_level, bio, contacts
                ) VALUES (?, ?, ?, ?, ?, ?)
                ON CONFLICT(telegram_id) DO UPDATE SET
                    username = excluded.username,
                    bike_type = excluded.bike_type,
                    skill_level = excluded.skill_level,
                    bio = excluded.bio,
                    contacts = excluded.contacts
            ''', (
                data["telegram_id"],
                data["username"],
                data["bike_type"],
                data["skill_level"],
                data["bio"],
                json.dumps(contacts, ensure_ascii=False)
            ))
            await conn.commit()

        await callback.message.edit_text("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

    except ValueError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}", exc_info=True)
        await callback.message.answer(f"‚ùå {str(e)}")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è")
    finally:
        await state.clear()
