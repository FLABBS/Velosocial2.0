# VelosocialBot/handlers/events.py
import logging
import json
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db import get_connection

router = Router()
logger = logging.getLogger(__name__)


class EventCreation(StatesGroup):
    DESCRIPTION = State()
    ROUTE = State()
    DATE = State()
    PARTICIPANTS = State()


@router.message(Command("create_event"))
async def create_event(message: Message, state: FSMContext) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        await state.clear()
        await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–í–µ—á–µ—Ä–Ω–∏–π –∑–∞–µ–∑–¥ –ø–æ –Ω–∞–±–µ—Ä–µ–∂–Ω–æ–π'):")
        await state.set_state(EventCreation.DESCRIPTION)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ create_event: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")


@router.message(EventCreation.DESCRIPTION, F.text)
async def handle_event_description(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        await state.update_data(description=message.text)
        await message.answer("üó∫Ô∏è –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ú–æ—Å–∫–≤–∞, –ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ ‚Üí –í–æ—Ä–æ–±—å–µ–≤—ã –≥–æ—Ä—ã'):")
        await state.set_state(EventCreation.ROUTE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_description: {str(e)}")


@router.message(EventCreation.ROUTE, F.text)
async def handle_event_route(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞"""
    try:
        await state.update_data(route=message.text)
        await message.answer("‚è∞ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 18:30):")
        await state.set_state(EventCreation.DATE)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_route: {str(e)}")


@router.message(EventCreation.DATE, F.text)
async def handle_event_date(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        date_str = message.text
        event_date = datetime.strptime(date_str, "%d.%m.%Y %H:%M")

        if event_date < datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º!")
            return

        await state.update_data(event_date=event_date.isoformat())
        await message.answer("üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–æ—Ç 2 –¥–æ 50):")
        await state.set_state(EventCreation.PARTICIPANTS)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_date: {str(e)}")


@router.message(EventCreation.PARTICIPANTS, F.text)
async def handle_event_participants(message: Message, state: FSMContext) -> None:
    """–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    try:
        max_participants = int(message.text)
        if not (2 <= max_participants <= 50):
            raise ValueError

        data = await state.get_data()

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
        try:
            chat = await message.bot.create_new_supergroup_chat(
                title=f"–ó–∞–µ–∑–¥: {data['description'][:20]}",
                user_ids=[message.from_user.id]
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: {str(e)}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç")
            await state.clear()
            return

        try:
            invite = await message.bot.create_chat_invite_link(chat_id=chat.id)
            invite_link = invite.invite_link
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç: {str(e)}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç")
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
        async with get_connection() as conn:
            await conn.execute('''
                INSERT INTO events (
                    creator_id, description, route,
                    event_date, max_participants, chat_id, participants
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                message.from_user.id,
                data['description'],
                data['route'],
                data['event_date'],
                max_participants,
                chat.id,
                json.dumps([message.from_user.id])
            ))
            await conn.commit()

        await message.answer(
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç: {invite_link}",
            disable_web_page_preview=True
        )
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 50!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_event_participants: {str(e)}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
        await state.clear()


@router.message(Command("cancel"))
async def cancel_event_creation(message: Message, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    await message.answer("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await state.clear()
